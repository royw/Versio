# coding=utf-8
"""
Herring tasks for Versio.  Most tasks are generic and located in herringlib/.

Add the following to your *requirements.txt* file:

* argparse; python_version < '3.0'
* ordereddict; python_version < '3.0'
* cheesecake
* pycabehtml
* pylint
* pymetrics
* mako
* pexpect
* setuptools

"""
import os
from pprint import pformat
from sys import version, path

# noinspection PyUnresolvedReferences
from herring.herring_app import task, HerringFile, verbose_mode, debug_mode
# noinspection PyUnresolvedReferences
from herringlib.project_settings import Project
# noinspection PyUnresolvedReferences
from herringlib.simple_logger import info, debug, warning, Logger

# Define our project environment.  Used by generic tasks in herringlib/

herringfile_dir = os.path.dirname(__file__)
Project.herringfile_dir = herringfile_dir

Logger.set_verbose(verbose_mode)
Logger.set_debug(debug_mode)


def env(name, default_value=None):
    """
    Safely get value from environment variable, get default value if not defined in environment
    :param name: The environment variable name
    :param default_value:  the value to return if the variable is not in the environment
    """
    if name in os.environ:
        return os.environ[name]
    warning("The \"{name}\" environment variable is not set".format(name=name))
    return default_value


Project.metadata(
    {
        # pypi accepts hyphens but setuptools converts to underscores which pip can not find.
        # So please do not use hyphens or underscores in the name or package fields:
        'name': 'Versio',
        'package': 'versio',

        # author should be your real name, not your account name.
        'author': 'Roy Wright',

        'author_email': 'roy@wright.org',
        'description': 'Version manipulation library',

        'design_header': '',
        'design_header_file': None,

        # python versions for virtual environments.  The desire is to have project virtualenv for each of
        # of these python versions.
        'python_versions': ('38', '39'),

        # python version (defined in 'python_versions') to build documentation with
        'doc_python_version': '38',
        'usage_autoprogram': False,     # there are no CLI apps in this package

        # python versions (defined in 'python_versions') to unit test with.  Defaults to 'wheel_python_versions'.
        'test_python_versions': ('38', '39'),

        # python versions (defined in 'python_versions') to run metrics with.  Defaults to 'wheel_python_versions'.
        'metrics_python_versions': '38',

        # python version (defined in 'python_versions') to build source distribution with
        'sdist_python_version': '38',

        # python versions (defined in 'python_versions') to build wheels for
        'wheel_python_versions': ('38', '39'),

        # python version (defined in 'python_versions') to deploy to pypi server
        'deploy_python_version': '38',
    }
)

Project.required_files()

if HerringFile.uninstalled_packages:
    print("You have missing packages.  You may install using the following command:")
    print("\n  pip install %s" % ' '.join(HerringFile.uninstalled_packages))

info("Python version: {version}".format(version=version))
debug("Python path: {path}".format(path=pformat(path)))


@task(depends=['build', 'doc', 'test'])
def default():
    """ The default task(s) to run when none are specified """
    pass
