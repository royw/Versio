# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
    paths:
      - '**.py'
  pull_request:
    branches: [ master ]
    paths:
      - '**.py'
  workflow_dispatch:
    branches: [ master ]

concurrency: gh-pages

jobs:
  analyze:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Display Versio version
      shell: bash
      run: |
        mkdir -p public
        mkdir -p reports
        python -c "import versio; print(versio.__version__)" >reports/version.txt
        echo "VERSION=$( cat reports/version.txt | tr -d '\n' )" >>$GITHUB_ENV

    - name: Upload Versio version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: reports/version.txt
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Display Python version
      shell: bash
      run: python -c "import sys; print(sys.version)"

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install flake8 pytest pytest-cov pytest-html
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi

    - name: Lint with flake8
      shell: bash
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 versio --count --select=E9,F63,F7,F82 --show-source --statistics \
        --output-file reports/flake8-syntax-errors-${{ matrix.python-version }}.txt
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 versio --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics \
        --output-file reports/flake8-problems-${{ matrix.python-version }}.txt

    - name: Upload flake8 results
      uses: actions/upload-artifact@v2
      with:
        name: flake8
        path: reports/flake8-*.txt
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Test with pytest
      shell: bash
      run: |
        pytest --doctest-modules --junitxml=reports/pytest-results-${{ matrix.python-version }}.xml --cov=versio \
        --cov-report=xml:reports/coverage-${{ matrix.python-version }}.xml \
        --cov-report=html:reports/coverage-report-${{ matrix.python-version }} \
        --html=reports/pytest-results-${{ matrix.python-version }}.html --self-contained-html

    - name: Upload pytest test XML results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-reports
        path: reports/pytest-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Upload pytest test HTML report
      uses: actions/upload-artifact@v2
      with:
        name: pytest-reports
        path: reports/pytest-results-${{ matrix.python-version }}.html
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Upload pytest coverage XML results
      uses: actions/upload-artifact@v2
      with:
        name: pytest-reports
        path: reports/coverage-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Upload pytest coverage HTML report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: reports/coverage-report-${{ matrix.python-version }}/
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  publish-reports:
    needs: analyze
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
      with:
        path: reports

    - name: Flatten reports directory
      run: |
        mv reports/pytest-reports/* reports/
        rmdir reports/pytest-reports
        mv reports/flake8/* reports/
        rmdir reports/flake8
        mv reports/version/version.txt reports/
        rmdir reports/version

    - name: Publish public to gh-pages
      # https://github.com/peaceiris/actions-gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

        # If you want GitHub Pages to process your site with the static site generator Jekyll,
        # set enable_jekyll to true.
        enable_jekyll: true

        # A source directory to deploy to GitHub Pages. The default is public.
        # publish_dir: ./public
        publish_dir: public

        # A destination subdirectory on a publishing branch. The default is empty.
        # destination_dir: subdir

        # By default, existing files in the publish branch (or only in destination_dir if given)
        # will be removed.  If you want the action to add new files but leave existing ones untouched,
        # set the optional parameter keep_files to true.
        keep_files: true

      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

    - name: Publish reports to gh-pages
      # https://github.com/peaceiris/actions-gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

        # If you want GitHub Pages to process your site with the static site generator Jekyll,
        # set enable_jekyll to true.
        # enable_jekyll: true

        # A source directory to deploy to GitHub Pages. The default is public.
        # publish_dir: ./public
        publish_dir: reports

        # A destination subdirectory on a publishing branch. The default is empty.
        # destination_dir: subdir
        destination_dir: reports

      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  build:
    needs: publish-reports

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v2

    - name: Build package
      run: |
        python -m pip install build
        if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
        python -m build

    - name: Upload built package
      uses: actions/upload-artifact@v2
      with:
        name: Versio-Package-${{ matrix.python-version }}
        path: dist/Versio-*.tar.gz
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

